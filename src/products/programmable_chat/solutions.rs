// AUTO-GENERATED. DO NOT MODIFY. YOUR CHANGES WILL BE OVER-WRITTEN
use crate::products::TwilioProgrammableChatError;
use standard_error::traits::StandardErrorSolutionsTrait;

impl StandardErrorSolutionsTrait for TwilioProgrammableChatError {
    fn solutions(&self) -> Option<&'static str> {
        match self {
            TwilioProgrammableChatError::ErrorCode50304 => None,
            TwilioProgrammableChatError::ErrorCode50412 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50417 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50208 => None,
            TwilioProgrammableChatError::ErrorCode50052 => None,
            TwilioProgrammableChatError::ErrorCode50205 => None,
            TwilioProgrammableChatError::ErrorCode50207 => None,
            TwilioProgrammableChatError::ErrorCode50054 => None,
            TwilioProgrammableChatError::ErrorCode50074 => Some(r#"*  Make sure your application (client or backend) uses a good exponential back-off algorithm like the [one advocated by Amazon](https://www.awsarchitectureblog.com/2015/03/backoff.html) to retry on HTTP 429 (rate limiting) responses
*  Reduce the rate of requests and introduce basic rate control, e.g. for user or channel provisioning use-cases
*  Reduce number of concurrent requests"#),
            TwilioProgrammableChatError::ErrorCode50384 => Some(r#"* Change 'State' parameter value to either 'active' or 'inactive' during conversation creation"#),
            TwilioProgrammableChatError::ErrorCode50434 => Some(r#"* [Provide a Projected Address](https://www.twilio.com/docs/conversations/group-texting#scenario-1-set-up-a-group-message-with-one-chat-participant-and-two-sms-participants) when adding this Participant to the Group Conversation. This is the correct path when adding Chat participants to a Group MMS conversation."#),
            TwilioProgrammableChatError::ErrorCode50509 => None,
            TwilioProgrammableChatError::ErrorCode50077 => Some(r#"*  Make sure that url is complete and properly encoded.
*  Make sure that url contains valid protocol and hostname and doesn't contain invalid characters."#),
            TwilioProgrammableChatError::ErrorCode50451 => Some(r#"*  Please, provide either Identity or Address"#),
            TwilioProgrammableChatError::ErrorCode50059 => None,
            TwilioProgrammableChatError::ErrorCode50431 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50375 => Some(r#"* Set 'TimeToInactive' field to duration which is longer than 1 minute."#),
            TwilioProgrammableChatError::ErrorCode50380 => Some(r#"* Use ISO8601 duration format value for 'TimeToInactive' parameter. For example PT0S, PT10M, P1D etc.."#),
            TwilioProgrammableChatError::ErrorCode50449 => Some(r#"* Implement an operation retrier and repeat the failed channel API requests after an interval of time, using an exponential backoff algorithm.
* Review your application logic that caused the race condition when adding or removing users. Perhaps the conflicting operations are happening in a loop that could be avoided.
* Serialize your API requests that add or remove channels. Wait until the original request completes and returns an API response, before sending any successive channel requests."#),
            TwilioProgrammableChatError::ErrorCode50057 => None,
            TwilioProgrammableChatError::ErrorCode50340 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50377 => Some(r#"* Create new conversation in 'active' state without 'TimeToClosed' or with some big duration to avoid unexpected movement to 'closed' state."#),
            TwilioProgrammableChatError::ErrorCode50506 => None,
            TwilioProgrammableChatError::ErrorCode50101 => None,
            TwilioProgrammableChatError::ErrorCode50332 => None,
            TwilioProgrammableChatError::ErrorCode50393 => Some(r#"* Change Type parameter to 'private'"#),
            TwilioProgrammableChatError::ErrorCode50436 => Some(r#"* Drop another participant from the conversation before adding new one."#),
            TwilioProgrammableChatError::ErrorCode50374 => Some(r#"* Remove 'State' field from request parameters.
* Set 'State' field to some valid value('active', 'inactive', 'closed', etc.)"#),
            TwilioProgrammableChatError::ErrorCode50330 => None,
            TwilioProgrammableChatError::ErrorCode50382 => Some(r#"* Add 'State' parameter in conversation creation request
* Remove 'TimeToInactive' and/or 'TimeToClosed' from conversation creation request"#),
            TwilioProgrammableChatError::ErrorCode50418 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50378 => Some(r#"* Use following values for 'State' parameter: 'active', 'inactive', 'closed'."#),
            TwilioProgrammableChatError::ErrorCode50438 => Some(r#"* If the existing conversation is no longer in use, delete or [close the conversation](https://www.twilio.com/docs/conversations/states-timers#closed-conversations).
* Alternatively, locate the other conversation and use that in place of this one."#),
            TwilioProgrammableChatError::ErrorCode50107 => None,
            TwilioProgrammableChatError::ErrorCode50201 => None,
            TwilioProgrammableChatError::ErrorCode50328 => None,
            TwilioProgrammableChatError::ErrorCode50104 => None,
            TwilioProgrammableChatError::ErrorCode50309 => Some(r#"*  Confirm a valid Date Updated parameter is passed in request. "#),
            TwilioProgrammableChatError::ErrorCode50363 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50414 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50310 => None,
            TwilioProgrammableChatError::ErrorCode50371 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50373 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50442 => Some(r#"* Check that the request does not update projected address of this particular participant."#),
            TwilioProgrammableChatError::ErrorCode50370 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50511 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50327 => None,
            TwilioProgrammableChatError::ErrorCode50211 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50602 => Some(r#"User shouldn't decline invite if he was already added to channel."#),
            TwilioProgrammableChatError::ErrorCode50437 => Some(r#"* Add the participant with a different Address or Identity
* Ignore this error â€” your participant is already present."#),
            TwilioProgrammableChatError::ErrorCode50051 => None,
            TwilioProgrammableChatError::ErrorCode50408 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50440 => Some(r#"* Check that the request does not update proxy address of this particular participant."#),
            TwilioProgrammableChatError::ErrorCode50351 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50213 => Some(r#"* Implement an operation retrier and repeat the failed user API requests after an interval of time, using an exponential backoff algorithm.
* Review your application logic that caused the race condition when adding or removing users. Perhaps the conflicting operations are happening in a loop that could be avoided."#),
            TwilioProgrammableChatError::ErrorCode50100 => None,
            TwilioProgrammableChatError::ErrorCode50369 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50516 => Some(r#"* Proper message index should be provided."#),
            TwilioProgrammableChatError::ErrorCode50204 => None,
            TwilioProgrammableChatError::ErrorCode50416 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50053 => None,
            TwilioProgrammableChatError::ErrorCode50513 => Some(r#"* Check that the Author is participant of Group MMS conversation."#),
            TwilioProgrammableChatError::ErrorCode50419 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50413 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50362 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50320 => None,
            TwilioProgrammableChatError::ErrorCode50202 => None,
            TwilioProgrammableChatError::ErrorCode50105 => None,
            TwilioProgrammableChatError::ErrorCode50058 => None,
            TwilioProgrammableChatError::ErrorCode50422 => Some(r#"* Retrieve a [list of current participants](https://www.twilio.com/docs/conversations/api/conversation-participant-resource#read-multiple-conversationparticipant-resources) in this conversation and [remove](https://www.twilio.com/docs/conversations/api/conversation-participant-resource#delete-a-conversationparticipant-resource) the ones that are no longer required."#),
            TwilioProgrammableChatError::ErrorCode50003 => None,
            TwilioProgrammableChatError::ErrorCode50324 => None,
            TwilioProgrammableChatError::ErrorCode50421 => Some(r#"Confirm a valid parameter is passed in request."#),
            TwilioProgrammableChatError::ErrorCode50361 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50364 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50415 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50212 => Some(r#"Confirm that the Identity passed in the request is not already invited to the intended channel."#),
            TwilioProgrammableChatError::ErrorCode50600 => None,
            TwilioProgrammableChatError::ErrorCode50203 => None,
            TwilioProgrammableChatError::ErrorCode50056 => None,
            TwilioProgrammableChatError::ErrorCode50403 => None,
            TwilioProgrammableChatError::ErrorCode50420 => Some(r#"Remove MessagingBinding.Name and MessagingBinding.Level from the request."#),
            TwilioProgrammableChatError::ErrorCode50321 => None,
            TwilioProgrammableChatError::ErrorCode50502 => None,
            TwilioProgrammableChatError::ErrorCode19038 => Some(r#"Make sure PageToken query parameter is not smaller than 0"#),
            TwilioProgrammableChatError::ErrorCode50401 => None,
            TwilioProgrammableChatError::ErrorCode50507 => None,
            TwilioProgrammableChatError::ErrorCode50206 => None,
            TwilioProgrammableChatError::ErrorCode50435 => Some(r#"* Check that all the participants have messaging bindings.
* Check that there is at least one participant with user address only.
* Check that there is at least one participant with a proxy address or a projected address."#),
            TwilioProgrammableChatError::ErrorCode50303 => None,
            TwilioProgrammableChatError::ErrorCode50078 => Some(r#"*  Make sure that url is complete and properly encoded.
*  Make sure that url contains valid protocol and hostname and doesn't contain invalid characters."#),
            TwilioProgrammableChatError::ErrorCode50379 => Some(r#"* Use ISO8601 duration format value for 'TimeToInactive' parameter. For example PT0S, PT10M, P1D etc.."#),
            TwilioProgrammableChatError::ErrorCode50350 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50060 => None,
            TwilioProgrammableChatError::ErrorCode50331 => None,
            TwilioProgrammableChatError::ErrorCode50329 => None,
            TwilioProgrammableChatError::ErrorCode50441 => Some(r#"* Check that the request does not update proxy address of this particular participant."#),
            TwilioProgrammableChatError::ErrorCode50391 => Some(r#"* Implement an operation retrier and repeat the failed conversation API requests after an interval of time, using an exponential backoff algorithm.
* Review your application logic that caused the race condition when adding or removing users. Perhaps the conflicting operations are happening in a loop that could be avoided.
* Serialize your API requests that add or remove conversations. Wait until the original request completes and returns an API response, before sending any successive conversation requests."#),
            TwilioProgrammableChatError::ErrorCode50106 => None,
            TwilioProgrammableChatError::ErrorCode50368 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50214 => Some(r#"*  Increase user conversation limit for service instance
*  Remove user from conversations"#),
            TwilioProgrammableChatError::ErrorCode50512 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50326 => None,
            TwilioProgrammableChatError::ErrorCode50405 => None,
            TwilioProgrammableChatError::ErrorCode50006 => Some(r#"Confirm a valid Account SID is being passed in request and matches pattern "AC[0-9a-f]{32}". "#),
            TwilioProgrammableChatError::ErrorCode50209 => None,
            TwilioProgrammableChatError::ErrorCode50306 => None,
            TwilioProgrammableChatError::ErrorCode50508 => None,
            TwilioProgrammableChatError::ErrorCode20161 => Some(r#"Compare your request with the documentation for this resource. Be sure you are submitting form-encoded parameters."#),
            TwilioProgrammableChatError::ErrorCode50400 => None,
            TwilioProgrammableChatError::ErrorCode50341 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50407 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50433 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50200 => None,
            TwilioProgrammableChatError::ErrorCode50402 => None,
            TwilioProgrammableChatError::ErrorCode50432 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50367 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50055 => None,
            TwilioProgrammableChatError::ErrorCode50061 => None,
            TwilioProgrammableChatError::ErrorCode50004 => None,
            TwilioProgrammableChatError::ErrorCode50610 => Some(r#" "#),
            TwilioProgrammableChatError::ErrorCode50305 => None,
            TwilioProgrammableChatError::ErrorCode50322 => None,
            TwilioProgrammableChatError::ErrorCode50334 => Some(r#"* Do not try to update the channel while the deletion operation is in progress."#),
            TwilioProgrammableChatError::ErrorCode50406 => None,
            TwilioProgrammableChatError::ErrorCode50050 => None,
            TwilioProgrammableChatError::ErrorCode50349 => Some(r#"* Implement an operation retrier and repeat the failed channel API requests after an interval of time, using an exponential backoff algorithm.
* Review your application logic that caused the race condition when adding or removing users. Perhaps the conflicting operations are happening in a loop that could be avoided.
* Serialize your API requests that add or remove channels. Wait until the original request completes and returns an API response, before sending any successive channel requests."#),
            TwilioProgrammableChatError::ErrorCode50503 => None,
            TwilioProgrammableChatError::ErrorCode50109 => Some(r#"Confirm a valid Conversation Role is being passed in request."#),
            TwilioProgrammableChatError::ErrorCode50065 => None,
            TwilioProgrammableChatError::ErrorCode50443 => Some(r#"* Check that the request does not update projected address of this particular participant."#),
            TwilioProgrammableChatError::ErrorCode50342 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50076 => Some(r#"*  Make sure that webhook processing time is less than 5 seconds
*  Make webhook processing asynchronous on the app side and return response immediately "#),
            TwilioProgrammableChatError::ErrorCode50390 => Some(r#"Confirm a valid Conversation's Unique Name is being passed in request."#),
            TwilioProgrammableChatError::ErrorCode50376 => Some(r#"* Set 'TimeToClosed' field to duration which is longer than 10 minutes."#),
            TwilioProgrammableChatError::ErrorCode50366 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50392 => Some(r#"* set 'PreWebhookTimeout' field with a value greater than 0."#),
            TwilioProgrammableChatError::ErrorCode50500 => None,
            TwilioProgrammableChatError::ErrorCode50002 => None,
            TwilioProgrammableChatError::ErrorCode50308 => None,
            TwilioProgrammableChatError::ErrorCode50103 => None,
            TwilioProgrammableChatError::ErrorCode50504 => Some(r#"Confirm a valid length Message body is being passed in the request. Additionally, consider intercepting messages with [Event Webhooks](https://www.twilio.com/docs/chat/webhook-events#webhook-bodies-pre-event) to validate or reject messages."#),
            TwilioProgrammableChatError::ErrorCode50307 => None,
            TwilioProgrammableChatError::ErrorCode50300 => None,
            TwilioProgrammableChatError::ErrorCode50409 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50325 => None,
            TwilioProgrammableChatError::ErrorCode50404 => None,
            TwilioProgrammableChatError::ErrorCode50323 => None,
            TwilioProgrammableChatError::ErrorCode50063 => None,
            TwilioProgrammableChatError::ErrorCode50360 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50444 => Some(r#"* Check that the request does not update identity of this particular participant."#),
            TwilioProgrammableChatError::ErrorCode50302 => None,
            TwilioProgrammableChatError::ErrorCode50102 => None,
            TwilioProgrammableChatError::ErrorCode50411 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50372 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50430 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50000 => None,
            TwilioProgrammableChatError::ErrorCode50601 => None,
            TwilioProgrammableChatError::ErrorCode50439 => Some(r#"* Use a different address owned by the account."#),
            TwilioProgrammableChatError::ErrorCode50510 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50347 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50210 => None,
            TwilioProgrammableChatError::ErrorCode50501 => None,
            TwilioProgrammableChatError::ErrorCode50001 => None,
            TwilioProgrammableChatError::ErrorCode50505 => None,
            TwilioProgrammableChatError::ErrorCode50365 => Some(r#"null"#),
            TwilioProgrammableChatError::ErrorCode50301 => None,
            TwilioProgrammableChatError::ErrorCode50385 => Some(r#"If you need access to Conversations hosted in a Twilio datacenter outside the US, please reach out to Twilio Support through the [Console](https://console.twilio.com) or [Help Center](https://support.twilio.com) so we can prioritize it accordingly. In the meantime, use the default Twilio URLs (e.g. conversations.twilio.com)."#)
        }
    }
}
